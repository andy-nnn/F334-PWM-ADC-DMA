
NUCLEO-F334R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004988  08004988  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004988  08004988  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  0800499c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800499c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdb8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a45  00000000  00000000  0002cdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002e840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce30  00000000  00000000  00030058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4ae  00000000  00000000  0004ce88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000acfcd  00000000  00000000  00057336  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  00104380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004938 	.word	0x08004938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004938 	.word	0x08004938

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f001 f891 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f004 f966 	bl	80044b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f001 f89b 	bl	800134e <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f001 f871 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	2000002c 	.word	0x2000002c

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	2000002c 	.word	0x2000002c

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09a      	sub	sp, #104	; 0x68
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002e0:	2300      	movs	r3, #0
 80002e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80002e6:	2300      	movs	r3, #0
 80002e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d101      	bne.n	80002f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002f4:	2301      	movs	r3, #1
 80002f6:	e172      	b.n	80005de <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000302:	f003 0310 	and.w	r3, r3, #16
 8000306:	2b00      	cmp	r3, #0
 8000308:	d176      	bne.n	80003f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030e:	2b00      	cmp	r3, #0
 8000310:	d152      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f004 f8e5 	bl	80044fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033c:	2b00      	cmp	r3, #0
 800033e:	d13b      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 fecb 	bl	80010dc <ADC_Disable>
 8000346:	4603      	mov	r3, r0
 8000348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d12f      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
 8000358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800035c:	2b00      	cmp	r3, #0
 800035e:	d12b      	bne.n	80003b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000368:	f023 0302 	bic.w	r3, r3, #2
 800036c:	f043 0202 	orr.w	r2, r3, #2
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000382:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689a      	ldr	r2, [r3, #8]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000392:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000394:	4b94      	ldr	r3, [pc, #592]	; (80005e8 <HAL_ADC_Init+0x310>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a94      	ldr	r2, [pc, #592]	; (80005ec <HAL_ADC_Init+0x314>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	0c9a      	lsrs	r2, r3, #18
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80003aa:	e002      	b.n	80003b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1f9      	bne.n	80003ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d007      	beq.n	80003d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80003d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003d4:	d110      	bne.n	80003f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003da:	f023 0312 	bic.w	r3, r3, #18
 80003de:	f043 0210 	orr.w	r2, r3, #16
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ea:	f043 0201 	orr.w	r2, r3, #1
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	2b00      	cmp	r3, #0
 8000402:	f040 80df 	bne.w	80005c4 <HAL_ADC_Init+0x2ec>
 8000406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 80da 	bne.w	80005c4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 80d2 	bne.w	80005c4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000424:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000428:	f043 0202 	orr.w	r2, r3, #2
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000430:	4b6f      	ldr	r3, [pc, #444]	; (80005f0 <HAL_ADC_Init+0x318>)
 8000432:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800043c:	d102      	bne.n	8000444 <HAL_ADC_Init+0x16c>
 800043e:	4b6d      	ldr	r3, [pc, #436]	; (80005f4 <HAL_ADC_Init+0x31c>)
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e002      	b.n	800044a <HAL_ADC_Init+0x172>
 8000444:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000448:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	f003 0303 	and.w	r3, r3, #3
 8000454:	2b01      	cmp	r3, #1
 8000456:	d108      	bne.n	800046a <HAL_ADC_Init+0x192>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	2b01      	cmp	r3, #1
 8000464:	d101      	bne.n	800046a <HAL_ADC_Init+0x192>
 8000466:	2301      	movs	r3, #1
 8000468:	e000      	b.n	800046c <HAL_ADC_Init+0x194>
 800046a:	2300      	movs	r3, #0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d11c      	bne.n	80004aa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000470:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000472:	2b00      	cmp	r3, #0
 8000474:	d010      	beq.n	8000498 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f003 0303 	and.w	r3, r3, #3
 800047e:	2b01      	cmp	r3, #1
 8000480:	d107      	bne.n	8000492 <HAL_ADC_Init+0x1ba>
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b01      	cmp	r3, #1
 800048c:	d101      	bne.n	8000492 <HAL_ADC_Init+0x1ba>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <HAL_ADC_Init+0x1bc>
 8000492:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000494:	2b00      	cmp	r3, #0
 8000496:	d108      	bne.n	80004aa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	431a      	orrs	r2, r3
 80004a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004a8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	7e5b      	ldrb	r3, [r3, #25]
 80004ae:	035b      	lsls	r3, r3, #13
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80004b4:	2a01      	cmp	r2, #1
 80004b6:	d002      	beq.n	80004be <HAL_ADC_Init+0x1e6>
 80004b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004bc:	e000      	b.n	80004c0 <HAL_ADC_Init+0x1e8>
 80004be:	2200      	movs	r2, #0
 80004c0:	431a      	orrs	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80004d0:	4313      	orrs	r3, r2
 80004d2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d11b      	bne.n	8000516 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7e5b      	ldrb	r3, [r3, #25]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d109      	bne.n	80004fa <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ea:	3b01      	subs	r3, #1
 80004ec:	045a      	lsls	r2, r3, #17
 80004ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80004f0:	4313      	orrs	r3, r2
 80004f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f6:	663b      	str	r3, [r7, #96]	; 0x60
 80004f8:	e00d      	b.n	8000516 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000502:	f043 0220 	orr.w	r2, r3, #32
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050e:	f043 0201 	orr.w	r2, r3, #1
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051a:	2b01      	cmp	r3, #1
 800051c:	d007      	beq.n	800052e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	4313      	orrs	r3, r2
 8000528:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800052a:	4313      	orrs	r3, r2
 800052c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f003 030c 	and.w	r3, r3, #12
 8000538:	2b00      	cmp	r3, #0
 800053a:	d114      	bne.n	8000566 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800054a:	f023 0302 	bic.w	r3, r3, #2
 800054e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7e1b      	ldrb	r3, [r3, #24]
 8000554:	039a      	lsls	r2, r3, #14
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4313      	orrs	r3, r2
 8000560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000562:	4313      	orrs	r3, r2
 8000564:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_ADC_Init+0x320>)
 800056e:	4013      	ands	r3, r2
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000576:	430b      	orrs	r3, r1
 8000578:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d10c      	bne.n	800059c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	f023 010f 	bic.w	r1, r3, #15
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	430a      	orrs	r2, r1
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
 800059a:	e007      	b.n	80005ac <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f022 020f 	bic.w	r2, r2, #15
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	f023 0303 	bic.w	r3, r3, #3
 80005ba:	f043 0201 	orr.w	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	641a      	str	r2, [r3, #64]	; 0x40
 80005c2:	e00a      	b.n	80005da <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f023 0312 	bic.w	r3, r3, #18
 80005cc:	f043 0210 	orr.w	r2, r3, #16
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80005d4:	2301      	movs	r3, #1
 80005d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80005da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3768      	adds	r7, #104	; 0x68
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000008 	.word	0x20000008
 80005ec:	431bde83 	.word	0x431bde83
 80005f0:	50000300 	.word	0x50000300
 80005f4:	50000100 	.word	0x50000100
 80005f8:	fff0c007 	.word	0xfff0c007

080005fc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	2b00      	cmp	r3, #0
 8000614:	f040 809c 	bne.w	8000750 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800061e:	2b01      	cmp	r3, #1
 8000620:	d101      	bne.n	8000626 <HAL_ADC_Start+0x2a>
 8000622:	2302      	movs	r3, #2
 8000624:	e097      	b.n	8000756 <HAL_ADC_Start+0x15a>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 fcf6 	bl	8001020 <ADC_Enable>
 8000634:	4603      	mov	r3, r0
 8000636:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b00      	cmp	r3, #0
 800063c:	f040 8083 	bne.w	8000746 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000654:	4b42      	ldr	r3, [pc, #264]	; (8000760 <HAL_ADC_Start+0x164>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	2b00      	cmp	r3, #0
 800065e:	d004      	beq.n	800066a <HAL_ADC_Start+0x6e>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000668:	d115      	bne.n	8000696 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d027      	beq.n	80006d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800068c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000694:	e01e      	b.n	80006d4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006aa:	d004      	beq.n	80006b6 <HAL_ADC_Start+0xba>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a2c      	ldr	r2, [pc, #176]	; (8000764 <HAL_ADC_Start+0x168>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d10e      	bne.n	80006d4 <HAL_ADC_Start+0xd8>
 80006b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006e0:	d106      	bne.n	80006f0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	f023 0206 	bic.w	r2, r3, #6
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	645a      	str	r2, [r3, #68]	; 0x44
 80006ee:	e002      	b.n	80006f6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	221c      	movs	r2, #28
 8000704:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_ADC_Start+0x164>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	f003 031f 	and.w	r3, r3, #31
 800070e:	2b00      	cmp	r3, #0
 8000710:	d010      	beq.n	8000734 <HAL_ADC_Start+0x138>
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_ADC_Start+0x164>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	2b05      	cmp	r3, #5
 800071c:	d00a      	beq.n	8000734 <HAL_ADC_Start+0x138>
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <HAL_ADC_Start+0x164>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f003 031f 	and.w	r3, r3, #31
 8000726:	2b09      	cmp	r3, #9
 8000728:	d004      	beq.n	8000734 <HAL_ADC_Start+0x138>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000732:	d10f      	bne.n	8000754 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	689a      	ldr	r2, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f042 0204 	orr.w	r2, r2, #4
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	e006      	b.n	8000754 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800074e:	e001      	b.n	8000754 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000750:	2302      	movs	r3, #2
 8000752:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	50000300 	.word	0x50000300
 8000764:	50000100 	.word	0x50000100

08000768 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	2b08      	cmp	r3, #8
 800077c:	d102      	bne.n	8000784 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800077e:	2308      	movs	r3, #8
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e02e      	b.n	80007e2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000784:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <HAL_ADC_PollForConversion+0x188>)
 8000786:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	2b00      	cmp	r3, #0
 8000792:	d112      	bne.n	80007ba <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d11d      	bne.n	80007de <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f043 0220 	orr.w	r2, r3, #32
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e096      	b.n	80008e8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f043 0220 	orr.w	r2, r3, #32
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e084      	b.n	80008e8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <HAL_ADC_PollForConversion+0x188>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	f003 031f 	and.w	r3, r3, #31
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <HAL_ADC_PollForConversion+0x90>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007f6:	d104      	bne.n	8000802 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	e003      	b.n	800080a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000802:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800080a:	f7ff fd37 	bl	800027c <HAL_GetTick>
 800080e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000810:	e01a      	b.n	8000848 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000818:	d016      	beq.n	8000848 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d007      	beq.n	8000830 <HAL_ADC_PollForConversion+0xc8>
 8000820:	f7ff fd2c 	bl	800027c <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d20b      	bcs.n	8000848 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f043 0204 	orr.w	r2, r3, #4
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000844:	2303      	movs	r3, #3
 8000846:	e04f      	b.n	80008e8 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0dd      	beq.n	8000812 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800086c:	2b00      	cmp	r3, #0
 800086e:	d131      	bne.n	80008d4 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000876:	2b00      	cmp	r3, #0
 8000878:	d12c      	bne.n	80008d4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	2b08      	cmp	r3, #8
 8000886:	d125      	bne.n	80008d4 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	2b00      	cmp	r3, #0
 8000894:	d112      	bne.n	80008bc <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d112      	bne.n	80008d4 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f043 0201 	orr.w	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ba:	e00b      	b.n	80008d4 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f043 0220 	orr.w	r2, r3, #32
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008cc:	f043 0201 	orr.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	50000300 	.word	0x50000300

080008f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000910:	b480      	push	{r7}
 8000912:	b09b      	sub	sp, #108	; 0x6c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <HAL_ADC_ConfigChannel+0x22>
 800092e:	2302      	movs	r3, #2
 8000930:	e2a5      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x56e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 8289 	bne.w	8000e5c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b04      	cmp	r3, #4
 8000950:	d81c      	bhi.n	800098c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	461a      	mov	r2, r3
 8000966:	231f      	movs	r3, #31
 8000968:	4093      	lsls	r3, r2
 800096a:	43db      	mvns	r3, r3
 800096c:	4019      	ands	r1, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa00 f203 	lsl.w	r2, r0, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	430a      	orrs	r2, r1
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
 800098a:	e063      	b.n	8000a54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b09      	cmp	r3, #9
 8000992:	d81e      	bhi.n	80009d2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	3b1e      	subs	r3, #30
 80009a8:	221f      	movs	r2, #31
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4019      	ands	r1, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	3b1e      	subs	r3, #30
 80009c4:	fa00 f203 	lsl.w	r2, r0, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
 80009d0:	e040      	b.n	8000a54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	2b0e      	cmp	r3, #14
 80009d8:	d81e      	bhi.n	8000a18 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3b3c      	subs	r3, #60	; 0x3c
 80009ee:	221f      	movs	r2, #31
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	4019      	ands	r1, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	3b3c      	subs	r3, #60	; 0x3c
 8000a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	430a      	orrs	r2, r1
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
 8000a16:	e01d      	b.n	8000a54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	3b5a      	subs	r3, #90	; 0x5a
 8000a2c:	221f      	movs	r2, #31
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	4019      	ands	r1, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	3b5a      	subs	r3, #90	; 0x5a
 8000a48:	fa00 f203 	lsl.w	r2, r0, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f040 80e5 	bne.w	8000c2e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	d91c      	bls.n	8000aa6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6999      	ldr	r1, [r3, #24]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	3b1e      	subs	r3, #30
 8000a7e:	2207      	movs	r2, #7
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4019      	ands	r1, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	6898      	ldr	r0, [r3, #8]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	3b1e      	subs	r3, #30
 8000a98:	fa00 f203 	lsl.w	r2, r0, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	619a      	str	r2, [r3, #24]
 8000aa4:	e019      	b.n	8000ada <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6959      	ldr	r1, [r3, #20]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4019      	ands	r1, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	6898      	ldr	r0, [r3, #8]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d84f      	bhi.n	8000b9c <HAL_ADC_ConfigChannel+0x28c>
 8000afc:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <HAL_ADC_ConfigChannel+0x1f4>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b37 	.word	0x08000b37
 8000b0c:	08000b59 	.word	0x08000b59
 8000b10:	08000b7b 	.word	0x08000b7b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b1a:	4b9e      	ldr	r3, [pc, #632]	; (8000d94 <HAL_ADC_ConfigChannel+0x484>)
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	0691      	lsls	r1, r2, #26
 8000b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b26:	430a      	orrs	r2, r1
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b32:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b34:	e07e      	b.n	8000c34 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b3c:	4b95      	ldr	r3, [pc, #596]	; (8000d94 <HAL_ADC_ConfigChannel+0x484>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	0691      	lsls	r1, r2, #26
 8000b46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b54:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b56:	e06d      	b.n	8000c34 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000b5e:	4b8d      	ldr	r3, [pc, #564]	; (8000d94 <HAL_ADC_ConfigChannel+0x484>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	0691      	lsls	r1, r2, #26
 8000b68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b76:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b78:	e05c      	b.n	8000c34 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000b80:	4b84      	ldr	r3, [pc, #528]	; (8000d94 <HAL_ADC_ConfigChannel+0x484>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	0691      	lsls	r1, r2, #26
 8000b8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b98:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b9a:	e04b      	b.n	8000c34 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	069b      	lsls	r3, r3, #26
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d107      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000bbe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	069b      	lsls	r3, r3, #26
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d107      	bne.n	8000be4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000be2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	069b      	lsls	r3, r3, #26
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d107      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c06:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	069b      	lsls	r3, r3, #26
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d10a      	bne.n	8000c32 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c2a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000c2c:	e001      	b.n	8000c32 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000c2e:	bf00      	nop
 8000c30:	e000      	b.n	8000c34 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000c32:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d108      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x344>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x344>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <HAL_ADC_ConfigChannel+0x346>
 8000c54:	2300      	movs	r3, #0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 810b 	bne.w	8000e72 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d00f      	beq.n	8000c84 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000c82:	e049      	b.n	8000d18 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	409a      	lsls	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b09      	cmp	r3, #9
 8000ca4:	d91c      	bls.n	8000ce0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6999      	ldr	r1, [r3, #24]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b1b      	subs	r3, #27
 8000cb8:	2207      	movs	r2, #7
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4019      	ands	r1, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	6898      	ldr	r0, [r3, #8]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b1b      	subs	r3, #27
 8000cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	e01b      	b.n	8000d18 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6959      	ldr	r1, [r3, #20]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4019      	ands	r1, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6898      	ldr	r0, [r3, #8]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_ADC_ConfigChannel+0x488>)
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d105      	bne.n	8000d30 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d015      	beq.n	8000d5c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d34:	2b11      	cmp	r3, #17
 8000d36:	d105      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00b      	beq.n	8000d5c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d48:	2b12      	cmp	r3, #18
 8000d4a:	f040 8092 	bne.w	8000e72 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 808b 	bne.w	8000e72 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d64:	d102      	bne.n	8000d6c <HAL_ADC_ConfigChannel+0x45c>
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_ADC_ConfigChannel+0x48c>)
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e002      	b.n	8000d72 <HAL_ADC_ConfigChannel+0x462>
 8000d6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d70:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10f      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x490>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x490>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e007      	b.n	8000da2 <HAL_ADC_ConfigChannel+0x492>
 8000d92:	bf00      	nop
 8000d94:	83fff000 	.word	0x83fff000
 8000d98:	50000300 	.word	0x50000300
 8000d9c:	50000100 	.word	0x50000100
 8000da0:	2300      	movs	r3, #0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d150      	bne.n	8000e48 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d010      	beq.n	8000dce <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d107      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x4b8>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x4b8>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <HAL_ADC_ConfigChannel+0x4ba>
 8000dc8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d13c      	bne.n	8000e48 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	d11d      	bne.n	8000e12 <HAL_ADC_ConfigChannel+0x502>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dde:	d118      	bne.n	8000e12 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_ADC_ConfigChannel+0x57c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <HAL_ADC_ConfigChannel+0x580>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9a      	lsrs	r2, r3, #18
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e02:	e002      	b.n	8000e0a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f9      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e10:	e02e      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b11      	cmp	r3, #17
 8000e18:	d10b      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x522>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e22:	d106      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e2e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e30:	e01e      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d11a      	bne.n	8000e70 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e46:	e013      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f043 0220 	orr.w	r2, r3, #32
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e5a:	e00a      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f043 0220 	orr.w	r2, r3, #32
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e6e:	e000      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e70:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	376c      	adds	r7, #108	; 0x6c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	431bde83 	.word	0x431bde83

08000e94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b099      	sub	sp, #100	; 0x64
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eac:	d102      	bne.n	8000eb4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	e002      	b.n	8000eba <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000eb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e0a2      	b.n	800100a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e09b      	b.n	800100a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d17f      	bne.n	8000fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d179      	bne.n	8000fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000ef6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d040      	beq.n	8000f82 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f12:	035b      	lsls	r3, r3, #13
 8000f14:	430b      	orrs	r3, r1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f1a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d15c      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8000f5e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d14b      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	6811      	ldr	r1, [r2, #0]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	6892      	ldr	r2, [r2, #8]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f7e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f80:	e03c      	b.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f8c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d123      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8000fd0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d112      	bne.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000fde:	f023 030f 	bic.w	r3, r3, #15
 8000fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000fe4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000fe6:	e009      	b.n	8000ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f043 0220 	orr.w	r2, r3, #32
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000ffa:	e000      	b.n	8000ffe <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000ffc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800100a:	4618      	mov	r0, r3
 800100c:	3764      	adds	r7, #100	; 0x64
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	50000100 	.word	0x50000100
 800101c:	50000300 	.word	0x50000300

08001020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <ADC_Enable+0x2c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <ADC_Enable+0x2c>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <ADC_Enable+0x2e>
 800104c:	2300      	movs	r3, #0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d13c      	bne.n	80010cc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <ADC_Enable+0xb8>)
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00d      	beq.n	800107c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f043 0210 	orr.w	r2, r3, #16
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e028      	b.n	80010ce <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800108c:	f7ff f8f6 	bl	800027c <HAL_GetTick>
 8001090:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001092:	e014      	b.n	80010be <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001094:	f7ff f8f2 	bl	800027c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d90d      	bls.n	80010be <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e007      	b.n	80010ce <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d1e3      	bne.n	8001094 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	8000003f 	.word	0x8000003f

080010dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d108      	bne.n	8001108 <ADC_Disable+0x2c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <ADC_Disable+0x2c>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <ADC_Disable+0x2e>
 8001108:	2300      	movs	r3, #0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d040      	beq.n	8001190 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 030d 	and.w	r3, r3, #13
 8001118:	2b01      	cmp	r3, #1
 800111a:	d10f      	bne.n	800113c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0202 	orr.w	r2, r2, #2
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2203      	movs	r2, #3
 8001132:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001134:	f7ff f8a2 	bl	800027c <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800113a:	e022      	b.n	8001182 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f043 0210 	orr.w	r2, r3, #16
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e01c      	b.n	8001192 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001158:	f7ff f890 	bl	800027c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d90d      	bls.n	8001182 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f043 0210 	orr.w	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e007      	b.n	8001192 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d0e3      	beq.n	8001158 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff47 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5c 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e14e      	b.n	8001616 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8140 	beq.w	8001610 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x38>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b12      	cmp	r3, #18
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d00b      	beq.n	800143c <HAL_GPIO_Init+0xd4>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d007      	beq.n	800143c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001430:	2b11      	cmp	r3, #17
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d130      	bne.n	800149e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001472:	2201      	movs	r2, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f003 0201 	and.w	r2, r3, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 809a 	beq.w	8001610 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b55      	ldr	r3, [pc, #340]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a54      	ldr	r2, [pc, #336]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b52      	ldr	r3, [pc, #328]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a50      	ldr	r2, [pc, #320]	; (8001638 <HAL_GPIO_Init+0x2d0>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1e0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a46      	ldr	r2, [pc, #280]	; (800163c <HAL_GPIO_Init+0x2d4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1dc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a45      	ldr	r2, [pc, #276]	; (8001640 <HAL_GPIO_Init+0x2d8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1d8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a44      	ldr	r2, [pc, #272]	; (8001644 <HAL_GPIO_Init+0x2dc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1d4>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 800153c:	2305      	movs	r3, #5
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1e2>
 8001548:	2300      	movs	r3, #0
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155a:	4937      	ldr	r1, [pc, #220]	; (8001638 <HAL_GPIO_Init+0x2d0>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800158c:	4a2e      	ldr	r2, [pc, #184]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	f47f aea9 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800
 8001644:	48000c00 	.word	0x48000c00
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001668:	e002      	b.n	8001670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001682:	af00      	add	r7, sp, #0
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f000 bef4 	b.w	800247e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 816a 	beq.w	800197a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016a6:	4bb3      	ldr	r3, [pc, #716]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d00c      	beq.n	80016cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b2:	4bb0      	ldr	r3, [pc, #704]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d159      	bne.n	8001772 <HAL_RCC_OscConfig+0xf6>
 80016be:	4bad      	ldr	r3, [pc, #692]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d152      	bne.n	8001772 <HAL_RCC_OscConfig+0xf6>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0x82>
 80016f8:	4b9e      	ldr	r3, [pc, #632]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0xae>
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800171a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001726:	4b93      	ldr	r3, [pc, #588]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001732:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800173e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f002 021f 	and.w	r2, r2, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 810c 	beq.w	8001978 <HAL_RCC_OscConfig+0x2fc>
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 8106 	bne.w	8001978 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	f000 be86 	b.w	800247e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x110>
 800177e:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7c      	ldr	r2, [pc, #496]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e030      	b.n	80017ee <HAL_RCC_OscConfig+0x172>
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x134>
 8001796:	4b77      	ldr	r3, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a76      	ldr	r2, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 800179c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b74      	ldr	r3, [pc, #464]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a73      	ldr	r2, [pc, #460]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01e      	b.n	80017ee <HAL_RCC_OscConfig+0x172>
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x15a>
 80017bc:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6c      	ldr	r2, [pc, #432]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a69      	ldr	r2, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0x172>
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a66      	ldr	r2, [pc, #408]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b64      	ldr	r3, [pc, #400]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a63      	ldr	r2, [pc, #396]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ee:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f023 020f 	bic.w	r2, r3, #15
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	495d      	ldr	r1, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d059      	beq.n	80018c0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7fe fd36 	bl	800027c <HAL_GetTick>
 8001810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001816:	f7fe fd31 	bl	800027c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d902      	bls.n	800182c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	f000 be29 	b.w	800247e <HAL_RCC_OscConfig+0xe02>
 800182c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001830:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001840:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0x1e2>
 8001858:	4b46      	ldr	r3, [pc, #280]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e015      	b.n	800188a <HAL_RCC_OscConfig+0x20e>
 800185e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001862:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001876:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800187a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800188e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001892:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001896:	fa92 f2a2 	rbit	r2, r2
 800189a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800189e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018a2:	fab2 f282 	clz	r2, r2
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	f042 0220 	orr.w	r2, r2, #32
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f002 021f 	and.w	r2, r2, #31
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ab      	beq.n	8001816 <HAL_RCC_OscConfig+0x19a>
 80018be:	e05c      	b.n	800197a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7fe fcdc 	bl	800027c <HAL_GetTick>
 80018c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ca:	f7fe fcd7 	bl	800027c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d902      	bls.n	80018e0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	f000 bdcf 	b.w	800247e <HAL_RCC_OscConfig+0xe02>
 80018e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0x296>
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x2c2>
 8001912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001916:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800192e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_RCC_OscConfig+0x2f8>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001942:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001946:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800194a:	fa92 f2a2 	rbit	r2, r2
 800194e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001952:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001956:	fab2 f282 	clz	r2, r2
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f042 0220 	orr.w	r2, r2, #32
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f002 021f 	and.w	r2, r2, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ab      	bne.n	80018ca <HAL_RCC_OscConfig+0x24e>
 8001972:	e002      	b.n	800197a <HAL_RCC_OscConfig+0x2fe>
 8001974:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 816f 	beq.w	8001c68 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800198a:	4bd0      	ldr	r3, [pc, #832]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001996:	4bcd      	ldr	r3, [pc, #820]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d16c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x400>
 80019a2:	4bca      	ldr	r3, [pc, #808]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d166      	bne.n	8001a7c <HAL_RCC_OscConfig+0x400>
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d102      	bne.n	80019de <HAL_RCC_OscConfig+0x362>
 80019d8:	4bbc      	ldr	r3, [pc, #752]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	e013      	b.n	8001a06 <HAL_RCC_OscConfig+0x38a>
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a02:	4bb2      	ldr	r3, [pc, #712]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2202      	movs	r2, #2
 8001a08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a10:	fa92 f2a2 	rbit	r2, r2
 8001a14:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a18:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a1c:	fab2 f282 	clz	r2, r2
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f042 0220 	orr.w	r2, r2, #32
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f002 021f 	and.w	r2, r2, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_RCC_OscConfig+0x3cc>
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f000 bd1b 	b.w	800247e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4ba0      	ldr	r3, [pc, #640]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	21f8      	movs	r1, #248	; 0xf8
 8001a58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a60:	fa91 f1a1 	rbit	r1, r1
 8001a64:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a68:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a6c:	fab1 f181 	clz	r1, r1
 8001a70:	b2c9      	uxtb	r1, r1
 8001a72:	408b      	lsls	r3, r1
 8001a74:	4995      	ldr	r1, [pc, #596]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e0f5      	b.n	8001c68 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8085 	beq.w	8001b92 <HAL_RCC_OscConfig+0x516>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7fe fbe2 	bl	800027c <HAL_GetTick>
 8001ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abe:	f7fe fbdd 	bl	800027c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f000 bcd5 	b.w	800247e <HAL_RCC_OscConfig+0xe02>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ae6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0x488>
 8001afe:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x4b0>
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b36:	fa92 f2a2 	rbit	r2, r2
 8001b3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0af      	beq.n	8001abe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	21f8      	movs	r1, #248	; 0xf8
 8001b6e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b76:	fa91 f1a1 	rbit	r1, r1
 8001b7a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b7e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b82:	fab1 f181 	clz	r1, r1
 8001b86:	b2c9      	uxtb	r1, r1
 8001b88:	408b      	lsls	r3, r1
 8001b8a:	4950      	ldr	r1, [pc, #320]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	e06a      	b.n	8001c68 <HAL_RCC_OscConfig+0x5ec>
 8001b92:	2301      	movs	r3, #1
 8001b94:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fb5d 	bl	800027c <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7fe fb58 	bl	800027c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d902      	bls.n	8001bde <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f000 bc50 	b.w	800247e <HAL_RCC_OscConfig+0xe02>
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <HAL_RCC_OscConfig+0x592>
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	e013      	b.n	8001c36 <HAL_RCC_OscConfig+0x5ba>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_RCC_OscConfig+0x650>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	2202      	movs	r2, #2
 8001c38:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c40:	fa92 f2a2 	rbit	r2, r2
 8001c44:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c48:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1af      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80da 	beq.w	8001e2c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d069      	beq.n	8001d56 <HAL_RCC_OscConfig+0x6da>
 8001c82:	2301      	movs	r3, #1
 8001c84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x654>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2301      	movs	r3, #1
 8001caa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7fe fae6 	bl	800027c <HAL_GetTick>
 8001cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb4:	e00e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7fe fae1 	bl	800027c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d906      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e3d9      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	10908120 	.word	0x10908120
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ce6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d1e:	2102      	movs	r1, #2
 8001d20:	6019      	str	r1, [r3, #0]
 8001d22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f1a3 	rbit	r1, r3
 8001d2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d30:	6019      	str	r1, [r3, #0]
  return result;
 8001d32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0b0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x63a>
 8001d54:	e06a      	b.n	8001e2c <HAL_RCC_OscConfig+0x7b0>
 8001d56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d6c:	601a      	str	r2, [r3, #0]
  return result;
 8001d6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d72:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x934>)
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7fe fa78 	bl	800027c <HAL_GetTick>
 8001d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d92:	f7fe fa73 	bl	800027c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e36b      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 8001da6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001daa:	2202      	movs	r2, #2
 8001dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dda:	2202      	movs	r2, #2
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001df6:	2102      	movs	r1, #2
 8001df8:	6019      	str	r1, [r3, #0]
 8001dfa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f1a3 	rbit	r1, r3
 8001e04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e08:	6019      	str	r1, [r3, #0]
  return result;
 8001e0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1b2      	bne.n	8001d92 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8158 	beq.w	80020ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e42:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d112      	bne.n	8001e74 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_RCC_OscConfig+0x938>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11a      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x938>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a4b      	ldr	r2, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x938>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe f9f6 	bl	800027c <HAL_GetTick>
 8001e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e009      	b.n	8001eaa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7fe f9f1 	bl	800027c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e2e9      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_RCC_OscConfig+0x938>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ef      	beq.n	8001e96 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x852>
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a39      	ldr	r2, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e02f      	b.n	8001f2e <HAL_RCC_OscConfig+0x8b2>
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x876>
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e01d      	b.n	8001f2e <HAL_RCC_OscConfig+0x8b2>
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x89a>
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x8b2>
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d06b      	beq.n	8002010 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe f9a0 	bl	800027c <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe f99b 	bl	800027c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e291      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 8001f5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f5e:	2202      	movs	r2, #2
 8001f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f88:	601a      	str	r2, [r3, #0]
  return result;
 8001f8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x93c>
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <HAL_RCC_OscConfig+0x930>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x958>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	10908120 	.word	0x10908120
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4bbb      	ldr	r3, [pc, #748]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fd8:	2102      	movs	r1, #2
 8001fda:	6011      	str	r1, [r2, #0]
 8001fdc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	fa92 f1a2 	rbit	r1, r2
 8001fe6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fea:	6011      	str	r1, [r2, #0]
  return result;
 8001fec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d099      	beq.n	8001f42 <HAL_RCC_OscConfig+0x8c6>
 800200e:	e063      	b.n	80020d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7fe f934 	bl	800027c <HAL_GetTick>
 8002014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe f92f 	bl	800027c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e225      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 8002032:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002036:	2202      	movs	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002060:	601a      	str	r2, [r3, #0]
  return result;
 8002062:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002066:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d102      	bne.n	8002082 <HAL_RCC_OscConfig+0xa06>
 800207c:	4b90      	ldr	r3, [pc, #576]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	e00d      	b.n	800209e <HAL_RCC_OscConfig+0xa22>
 8002082:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020a2:	2102      	movs	r1, #2
 80020a4:	6011      	str	r1, [r2, #0]
 80020a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fa92 f1a2 	rbit	r1, r2
 80020b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020b4:	6011      	str	r1, [r2, #0]
  return result;
 80020b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f002 021f 	and.w	r2, r2, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1a0      	bne.n	800201a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b77      	ldr	r3, [pc, #476]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	4a76      	ldr	r2, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 81c2 	beq.w	800247c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f8:	4b71      	ldr	r3, [pc, #452]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	f000 819c 	beq.w	800243e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b02      	cmp	r3, #2
 800210e:	f040 8114 	bne.w	800233a <HAL_RCC_OscConfig+0xcbe>
 8002112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002116:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002130:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	461a      	mov	r2, r3
 8002144:	2300      	movs	r3, #0
 8002146:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe f898 	bl	800027c <HAL_GetTick>
 800214c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e009      	b.n	8002166 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe f893 	bl	800027c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e18b      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 8002166:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800216a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800217e:	601a      	str	r2, [r3, #0]
  return result;
 8002180:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_OscConfig+0xb24>
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e01b      	b.n	80021d8 <HAL_RCC_OscConfig+0xb5c>
 80021a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fa92 f1a2 	rbit	r1, r2
 80021ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021f0:	6011      	str	r1, [r2, #0]
  return result;
 80021f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	fab2 f282 	clz	r2, r2
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f002 021f 	and.w	r2, r2, #31
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f202 	lsl.w	r2, r1, r2
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d19e      	bne.n	8002152 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	430b      	orrs	r3, r1
 800222a:	4925      	ldr	r1, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002248:	601a      	str	r2, [r3, #0]
  return result;
 800224a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800224e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800225a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	2301      	movs	r3, #1
 8002264:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe f809 	bl	800027c <HAL_GetTick>
 800226a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226e:	e009      	b.n	8002284 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe f804 	bl	800027c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0fc      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 8002284:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800228c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800229c:	601a      	str	r2, [r3, #0]
  return result;
 800229e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0xc48>
 80022b8:	4b01      	ldr	r3, [pc, #4]	; (80022c0 <HAL_RCC_OscConfig+0xc44>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	e01e      	b.n	80022fc <HAL_RCC_OscConfig+0xc80>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_OscConfig+0xe0c>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002304:	6011      	str	r1, [r2, #0]
 8002306:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	fa92 f1a2 	rbit	r1, r2
 8002310:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002314:	6011      	str	r1, [r2, #0]
  return result;
 8002316:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f042 0220 	orr.w	r2, r2, #32
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f002 021f 	and.w	r2, r2, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d09b      	beq.n	8002270 <HAL_RCC_OscConfig+0xbf4>
 8002338:	e0a0      	b.n	800247c <HAL_RCC_OscConfig+0xe00>
 800233a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800233e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002358:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fd ff84 	bl	800027c <HAL_GetTick>
 8002374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	e009      	b.n	800238e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fd ff7f 	bl	800027c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e077      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a6:	601a      	str	r2, [r3, #0]
  return result;
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_OscConfig+0xd4c>
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCC_OscConfig+0xe0c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e01b      	b.n	8002400 <HAL_RCC_OscConfig+0xd84>
 80023c8:	f107 0320 	add.w	r3, r7, #32
 80023cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f107 0318 	add.w	r3, r7, #24
 80023e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f107 0318 	add.w	r3, r7, #24
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_OscConfig+0xe0c>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f107 0210 	add.w	r2, r7, #16
 8002404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	f107 0210 	add.w	r2, r7, #16
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	fa92 f1a2 	rbit	r1, r2
 8002414:	f107 020c 	add.w	r2, r7, #12
 8002418:	6011      	str	r1, [r2, #0]
  return result;
 800241a:	f107 020c 	add.w	r2, r7, #12
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f002 021f 	and.w	r2, r2, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f202 	lsl.w	r2, r1, r2
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d19e      	bne.n	800237a <HAL_RCC_OscConfig+0xcfe>
 800243c:	e01e      	b.n	800247c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e018      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_RCC_OscConfig+0xe0c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002454:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	429a      	cmp	r2, r3
 8002464:	d108      	bne.n	8002478 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800246a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b09e      	sub	sp, #120	; 0x78
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e162      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	498b      	ldr	r1, [pc, #556]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e14a      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	497f      	ldr	r1, [pc, #508]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80dc 	beq.w	80026b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d13c      	bne.n	8002582 <HAL_RCC_ClockConfig+0xf6>
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_RCC_ClockConfig+0xa6>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	e00f      	b.n	8002552 <HAL_RCC_ClockConfig+0xc6>
 8002532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002536:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	667b      	str	r3, [r7, #100]	; 0x64
 8002540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002556:	65ba      	str	r2, [r7, #88]	; 0x58
 8002558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800255a:	fa92 f2a2 	rbit	r2, r2
 800255e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d17b      	bne.n	8002676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0f3      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d13c      	bne.n	8002604 <HAL_RCC_ClockConfig+0x178>
 800258a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x128>
 80025ae:	4b4f      	ldr	r3, [pc, #316]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_ClockConfig+0x148>
 80025b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
 80025c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c6:	643b      	str	r3, [r7, #64]	; 0x40
 80025c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80025da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0220 	orr.w	r2, r2, #32
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d13a      	bne.n	8002676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b2      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
 8002604:	2302      	movs	r3, #2
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_ClockConfig+0x1a0>
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e00d      	b.n	8002648 <HAL_RCC_ClockConfig+0x1bc>
 800262c:	2302      	movs	r3, #2
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	2302      	movs	r3, #2
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2202      	movs	r2, #2
 800264a:	61ba      	str	r2, [r7, #24]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	617a      	str	r2, [r7, #20]
  return result;
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	fab2 f282 	clz	r2, r2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f002 021f 	and.w	r2, r2, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f202 	lsl.w	r2, r1, r2
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e079      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	491a      	ldr	r1, [pc, #104]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002688:	f7fd fdf8 	bl	800027c <HAL_GetTick>
 800268c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fd fdf4 	bl	800027c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e061      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_ClockConfig+0x260>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 020c 	and.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1eb      	bne.n	8002690 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d214      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4906      	ldr	r1, [pc, #24]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HAL_RCC_ClockConfig+0x25c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e040      	b.n	800276a <HAL_RCC_ClockConfig+0x2de>
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_ClockConfig+0x2e8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	491a      	ldr	r1, [pc, #104]	; (8002774 <HAL_RCC_ClockConfig+0x2e8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x2e8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4912      	ldr	r1, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x2e8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800272e:	f000 f829 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002732:	4601      	mov	r1, r0
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_RCC_ClockConfig+0x2e8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800273c:	22f0      	movs	r2, #240	; 0xf0
 800273e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	fa92 f2a2 	rbit	r2, r2
 8002746:	60fa      	str	r2, [r7, #12]
  return result;
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	40d3      	lsrs	r3, r2
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x2ec>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	fa21 f303 	lsr.w	r3, r1, r3
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_RCC_ClockConfig+0x2f0>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCC_ClockConfig+0x2f4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fd46 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3778      	adds	r7, #120	; 0x78
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	08004970 	.word	0x08004970
 800277c:	20000008 	.word	0x20000008
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b08b      	sub	sp, #44	; 0x2c
 8002788:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x36>
 80027b2:	e03c      	b.n	800282e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027b6:	623b      	str	r3, [r7, #32]
      break;
 80027b8:	e03c      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	607a      	str	r2, [r7, #4]
  return result;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	40d3      	lsrs	r3, r2
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	220f      	movs	r2, #15
 80027e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	fa92 f2a2 	rbit	r2, r2
 80027f0:	60fa      	str	r2, [r7, #12]
  return result;
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	40d3      	lsrs	r3, r2
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_RCC_GetSysClockFreq+0xc4>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	e004      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	623b      	str	r3, [r7, #32]
      break;
 800282c:	e002      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002830:	623b      	str	r3, [r7, #32]
      break;
 8002832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002834:	6a3b      	ldr	r3, [r7, #32]
}
 8002836:	4618      	mov	r0, r3
 8002838:	372c      	adds	r7, #44	; 0x2c
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	007a1200 	.word	0x007a1200
 800284c:	08004950 	.word	0x08004950
 8002850:	08004960 	.word	0x08004960
 8002854:	003d0900 	.word	0x003d0900

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000008 	.word	0x20000008

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002876:	f7ff ffef 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 800287a:	4601      	mov	r1, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002884:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002888:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	603a      	str	r2, [r7, #0]
  return result;
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004980 	.word	0x08004980

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028ba:	f7ff ffcd 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028be:	4601      	mov	r1, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	fa92 f2a2 	rbit	r2, r2
 80028d4:	603a      	str	r2, [r7, #0]
  return result;
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	40d3      	lsrs	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004980 	.word	0x08004980

080028f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b092      	sub	sp, #72	; 0x48
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80d0 	beq.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291c:	4b8e      	ldr	r3, [pc, #568]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10e      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b8b      	ldr	r3, [pc, #556]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a8a      	ldr	r2, [pc, #552]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	61d3      	str	r3, [r2, #28]
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b85      	ldr	r3, [pc, #532]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d118      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a81      	ldr	r2, [pc, #516]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7fd fc8d 	bl	800027c <HAL_GetTick>
 8002962:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fd fc89 	bl	800027c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d901      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0ea      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4b78      	ldr	r3, [pc, #480]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002984:	4b74      	ldr	r3, [pc, #464]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d07d      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800299e:	429a      	cmp	r2, r3
 80029a0:	d076      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a2:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	461a      	mov	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b5d      	ldr	r3, [pc, #372]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d045      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fd fc3a 	bl	800027c <HAL_GetTick>
 8002a08:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fd fc36 	bl	800027c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e095      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	61fb      	str	r3, [r7, #28]
  return result;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002a50:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	e007      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2202      	movs	r2, #2
 8002a68:	613a      	str	r2, [r7, #16]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	60fa      	str	r2, [r7, #12]
  return result;
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f002 021f 	and.w	r2, r2, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0bd      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	492e      	ldr	r1, [pc, #184]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f023 0210 	bic.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	491a      	ldr	r1, [pc, #104]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4913      	ldr	r1, [pc, #76]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	490b      	ldr	r1, [pc, #44]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3748      	adds	r7, #72	; 0x48
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	10908100 	.word	0x10908100

08002b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e01d      	b.n	8002bb2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 fd4e 	bl	800462c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 fa10 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e01d      	b.n	8002c08 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f815 	bl	8002c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 f9e5 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e105      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x226>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b14      	cmp	r3, #20
 8002c52:	f200 80f0 	bhi.w	8002e36 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002cb1 	.word	0x08002cb1
 8002c60:	08002e37 	.word	0x08002e37
 8002c64:	08002e37 	.word	0x08002e37
 8002c68:	08002e37 	.word	0x08002e37
 8002c6c:	08002cf1 	.word	0x08002cf1
 8002c70:	08002e37 	.word	0x08002e37
 8002c74:	08002e37 	.word	0x08002e37
 8002c78:	08002e37 	.word	0x08002e37
 8002c7c:	08002d33 	.word	0x08002d33
 8002c80:	08002e37 	.word	0x08002e37
 8002c84:	08002e37 	.word	0x08002e37
 8002c88:	08002e37 	.word	0x08002e37
 8002c8c:	08002d73 	.word	0x08002d73
 8002c90:	08002e37 	.word	0x08002e37
 8002c94:	08002e37 	.word	0x08002e37
 8002c98:	08002e37 	.word	0x08002e37
 8002c9c:	08002db5 	.word	0x08002db5
 8002ca0:	08002e37 	.word	0x08002e37
 8002ca4:	08002e37 	.word	0x08002e37
 8002ca8:	08002e37 	.word	0x08002e37
 8002cac:	08002df5 	.word	0x08002df5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f9fe 	bl	80030b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]
      break;
 8002cee:	e0a3      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa64 	bl	80031c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
      break;
 8002d30:	e082      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fac3 	bl	80032c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0208 	orr.w	r2, r2, #8
 8002d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0204 	bic.w	r2, r2, #4
 8002d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	61da      	str	r2, [r3, #28]
      break;
 8002d70:	e062      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fb21 	bl	80033c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69d9      	ldr	r1, [r3, #28]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	61da      	str	r2, [r3, #28]
      break;
 8002db2:	e041      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fb64 	bl	8003488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0208 	orr.w	r2, r2, #8
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0204 	bic.w	r2, r2, #4
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002df2:	e021      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fba2 	bl	8003544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	021a      	lsls	r2, r3, #8
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e34:	e000      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002e36:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop

08002e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_ConfigClockSource+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0a8      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d067      	beq.n	8002f78 <HAL_TIM_ConfigClockSource+0x124>
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d80b      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x70>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d073      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d802      	bhi.n	8002eba <HAL_TIM_ConfigClockSource+0x66>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d06f      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002eb8:	e078      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d06c      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
 8002ebe:	2b30      	cmp	r3, #48	; 0x30
 8002ec0:	d06a      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002ec2:	e073      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ec4:	2b70      	cmp	r3, #112	; 0x70
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_TIM_ConfigClockSource+0x90>
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d804      	bhi.n	8002ed6 <HAL_TIM_ConfigClockSource+0x82>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d033      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xe4>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d041      	beq.n	8002f58 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002ed4:	e06a      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d066      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x156>
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee0:	d017      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ee2:	e063      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f000 fc00 	bl	80036f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
      break;
 8002f10:	e04c      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f000 fbe9 	bl	80036f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f34:	609a      	str	r2, [r3, #8]
      break;
 8002f36:	e039      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f000 fb5d 	bl	8003604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2150      	movs	r1, #80	; 0x50
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fbb6 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 8002f56:	e029      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f000 fb7c 	bl	8003662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2160      	movs	r1, #96	; 0x60
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fba6 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 8002f76:	e019      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f000 fb3d 	bl	8003604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fb96 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 8002f96:	e009      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fb8d 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e000      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <TIM_Base_SetConfig+0xdc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x28>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x28>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <TIM_Base_SetConfig+0xe0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <TIM_Base_SetConfig+0xdc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <TIM_Base_SetConfig+0x6a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d00f      	beq.n	8003032 <TIM_Base_SetConfig+0x6a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <TIM_Base_SetConfig+0xe0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0x6a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <TIM_Base_SetConfig+0xe4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0x6a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <TIM_Base_SetConfig+0xe8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0x6a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <TIM_Base_SetConfig+0xec>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <TIM_Base_SetConfig+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0xc0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <TIM_Base_SetConfig+0xe4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0xc0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <TIM_Base_SetConfig+0xe8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0xc0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <TIM_Base_SetConfig+0xec>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800

080030b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0201 	bic.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 0302 	bic.w	r3, r3, #2
 8003104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <TIM_OC1_SetConfig+0xfc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00b      	beq.n	8003130 <TIM_OC1_SetConfig+0x78>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <TIM_OC1_SetConfig+0x100>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_OC1_SetConfig+0x78>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <TIM_OC1_SetConfig+0x104>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC1_SetConfig+0x78>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <TIM_OC1_SetConfig+0x108>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10c      	bne.n	800314a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0308 	bic.w	r3, r3, #8
 8003136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <TIM_OC1_SetConfig+0xfc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_OC1_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <TIM_OC1_SetConfig+0x100>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_OC1_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <TIM_OC1_SetConfig+0x104>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_OC1_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <TIM_OC1_SetConfig+0x108>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800

080031c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0320 	bic.w	r3, r3, #32
 8003212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <TIM_OC2_SetConfig+0xf0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d10d      	bne.n	8003244 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800322e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <TIM_OC2_SetConfig+0xf0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_OC2_SetConfig+0xa0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <TIM_OC2_SetConfig+0xf4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_OC2_SetConfig+0xa0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <TIM_OC2_SetConfig+0xf8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_OC2_SetConfig+0xa0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <TIM_OC2_SetConfig+0xfc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d113      	bne.n	800328c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800326a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003272:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800

080032c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <TIM_OC3_SetConfig+0xec>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10d      	bne.n	8003342 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800332c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003340:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <TIM_OC3_SetConfig+0xec>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_OC3_SetConfig+0x9e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <TIM_OC3_SetConfig+0xf0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_OC3_SetConfig+0x9e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <TIM_OC3_SetConfig+0xf4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_OC3_SetConfig+0x9e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <TIM_OC3_SetConfig+0xf8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800

080033c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800340e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	031b      	lsls	r3, r3, #12
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC4_SetConfig+0xb8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_OC4_SetConfig+0x7c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <TIM_OC4_SetConfig+0xbc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_OC4_SetConfig+0x7c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a14      	ldr	r2, [pc, #80]	; (8003480 <TIM_OC4_SetConfig+0xc0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC4_SetConfig+0x7c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <TIM_OC4_SetConfig+0xc4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d109      	bne.n	8003450 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800

08003488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC5_SetConfig+0xac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_OC5_SetConfig+0x72>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <TIM_OC5_SetConfig+0xb0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_OC5_SetConfig+0x72>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <TIM_OC5_SetConfig+0xb4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_OC5_SetConfig+0x72>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a12      	ldr	r2, [pc, #72]	; (8003540 <TIM_OC5_SetConfig+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d109      	bne.n	800350e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40014000 	.word	0x40014000
 800353c:	40014400 	.word	0x40014400
 8003540:	40014800 	.word	0x40014800

08003544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800358a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	051b      	lsls	r3, r3, #20
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <TIM_OC6_SetConfig+0xb0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <TIM_OC6_SetConfig+0x74>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <TIM_OC6_SetConfig+0xb4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <TIM_OC6_SetConfig+0x74>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <TIM_OC6_SetConfig+0xb8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_OC6_SetConfig+0x74>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <TIM_OC6_SetConfig+0xbc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d109      	bne.n	80035cc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	029b      	lsls	r3, r3, #10
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800362e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 030a 	bic.w	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f023 0210 	bic.w	r2, r3, #16
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800368c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	031b      	lsls	r3, r3, #12
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800369e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	f043 0307 	orr.w	r3, r3, #7
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	021a      	lsls	r2, r3, #8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	431a      	orrs	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e054      	b.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a24      	ldr	r2, [pc, #144]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d009      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10c      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40014000 	.word	0x40014000

08003814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800382c:	2302      	movs	r3, #2
 800382e:	e060      	b.n	80038f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d115      	bne.n	80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	051b      	lsls	r3, r3, #20
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40012c00 	.word	0x40012c00

08003904 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e03c      	b.n	8003990 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff0a 	bl	8004744 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f85b 	bl	8003a04 <USART_SetConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e01b      	b.n	8003990 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003966:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003976:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f941 	bl	8003c10 <USART_CheckIdleState>
 800398e:	4603      	mov	r3, r0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80039a8:	e018      	b.n	80039dc <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d014      	beq.n	80039dc <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fc fc63 	bl	800027c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <USART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e00f      	b.n	80039fc <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4013      	ands	r3, r2
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d0d7      	beq.n	80039aa <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b72      	ldr	r3, [pc, #456]	; (8003bfc <USART_SetConfig+0x1f8>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	6979      	ldr	r1, [r7, #20]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8003a3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a42:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <USART_SetConfig+0x1fc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d120      	bne.n	8003ac8 <USART_SetConfig+0xc4>
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <USART_SetConfig+0x200>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d816      	bhi.n	8003ac0 <USART_SetConfig+0xbc>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <USART_SetConfig+0x94>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab5 	.word	0x08003ab5
 8003aa0:	08003abb 	.word	0x08003abb
 8003aa4:	08003aaf 	.word	0x08003aaf
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e01e      	b.n	8003aec <USART_SetConfig+0xe8>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e01b      	b.n	8003aec <USART_SetConfig+0xe8>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e018      	b.n	8003aec <USART_SetConfig+0xe8>
 8003aba:	2308      	movs	r3, #8
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e015      	b.n	8003aec <USART_SetConfig+0xe8>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	bf00      	nop
 8003ac6:	e011      	b.n	8003aec <USART_SetConfig+0xe8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <USART_SetConfig+0x204>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d102      	bne.n	8003ad8 <USART_SetConfig+0xd4>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e009      	b.n	8003aec <USART_SetConfig+0xe8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4b      	ldr	r2, [pc, #300]	; (8003c0c <USART_SetConfig+0x208>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d102      	bne.n	8003ae8 <USART_SetConfig+0xe4>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e001      	b.n	8003aec <USART_SetConfig+0xe8>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d859      	bhi.n	8003ba6 <USART_SetConfig+0x1a2>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <USART_SetConfig+0xf4>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003ba7 	.word	0x08003ba7
 8003b08:	08003b73 	.word	0x08003b73
 8003b0c:	08003ba7 	.word	0x08003ba7
 8003b10:	08003ba7 	.word	0x08003ba7
 8003b14:	08003ba7 	.word	0x08003ba7
 8003b18:	08003b91 	.word	0x08003b91
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fea8 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8003b20:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	61bb      	str	r3, [r7, #24]
      break;
 8003b38:	e038      	b.n	8003bac <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b3a:	f7fe febb 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8003b3e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	005a      	lsls	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	441a      	add	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	61bb      	str	r3, [r7, #24]
      break;
 8003b56:	e029      	b.n	8003bac <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003b62:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6852      	ldr	r2, [r2, #4]
 8003b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
      break;
 8003b70:	e01c      	b.n	8003bac <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8003b72:	f7fe fe07 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003b76:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	005a      	lsls	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	61bb      	str	r3, [r7, #24]
      break;
 8003b8e:	e00d      	b.n	8003bac <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	61bb      	str	r3, [r7, #24]
      break;
 8003ba4:	e002      	b.n	8003bac <USART_SetConfig+0x1a8>
    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	77bb      	strb	r3, [r7, #30]
      break;
 8003baa:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	d916      	bls.n	8003be0 <USART_SetConfig+0x1dc>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d212      	bcs.n	8003be0 <USART_SetConfig+0x1dc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f023 030f 	bic.w	r3, r3, #15
 8003bc2:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	89fa      	ldrh	r2, [r7, #14]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	e001      	b.n	8003be4 <USART_SetConfig+0x1e0>
  }
  else
  {
    ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003bf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	efff69f3 	.word	0xefff69f3
 8003c00:	40013800 	.word	0x40013800
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40004400 	.word	0x40004400
 8003c0c:	40004800 	.word	0x40004800

08003c10 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c1e:	f7fc fb2d 	bl	800027c <HAL_GetTick>
 8003c22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d10e      	bne.n	8003c50 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fea9 	bl	8003998 <USART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e01e      	b.n	8003c8e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d10e      	bne.n	8003c7c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fe93 	bl	8003998 <USART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e008      	b.n	8003c8e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <map.9250>:
  float mapped_ADC_PB4 ;
  float mapped_ADC_PB0 ;

  //Map ranges of number
  long map(long x, long in_min, long in_max, long out_min, long out_max)
  	  {
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6178      	str	r0, [r7, #20]
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	60fa      	str	r2, [r7, #12]
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	f8c7 c004 	str.w	ip, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	6a39      	ldr	r1, [r7, #32]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	1a8a      	subs	r2, r1, r2
 8003cb4:	fb02 f203 	mul.w	r2, r2, r3
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1acb      	subs	r3, r1, r3
 8003cbe:	fb92 f2f3 	sdiv	r2, r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4413      	add	r3, r2
  	  }
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <main>:
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
int main(void)
 8003cda:	f107 0320 	add.w	r3, r7, #32
 8003cde:	607b      	str	r3, [r7, #4]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN ;
 8003ce0:	4b85      	ldr	r3, [pc, #532]	; (8003ef8 <main+0x224>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	4a84      	ldr	r2, [pc, #528]	; (8003ef8 <main+0x224>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN ;
 8003cec:	4b82      	ldr	r3, [pc, #520]	; (8003ef8 <main+0x224>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	4a81      	ldr	r2, [pc, #516]	; (8003ef8 <main+0x224>)
 8003cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf6:	6153      	str	r3, [r2, #20]
	GPIOB->MODER &= ~(GPIO_MODER_MODER3_0) ;
 8003cf8:	4b80      	ldr	r3, [pc, #512]	; (8003efc <main+0x228>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7f      	ldr	r2, [pc, #508]	; (8003efc <main+0x228>)
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_1 ;
 8003d04:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <main+0x228>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7c      	ldr	r2, [pc, #496]	; (8003efc <main+0x228>)
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8003d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6013      	str	r3, [r2, #0]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_3 | TIM_CCMR1_OC2PE ;
 8003d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 8003d32:	6193      	str	r3, [r2, #24]
	TIM2->PSC = 0 ;
 8003d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d38:	2200      	movs	r2, #0
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000 ;
 8003d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR2 = 500 ;
 8003d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCER |= TIM_CCER_CC2E ;
 8003d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= TIM_CR1_ARPE ;
 8003d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6e:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= TIM_EGR_UG ;
 8003d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= TIM_CR1_CEN ;
 8003d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN ;
 8003d90:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <main+0x224>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4a58      	ldr	r2, [pc, #352]	; (8003ef8 <main+0x224>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN ;
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <main+0x224>)
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4a55      	ldr	r2, [pc, #340]	; (8003ef8 <main+0x224>)
 8003da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da6:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN ;
 8003da8:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <main+0x224>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <main+0x224>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	6193      	str	r3, [r2, #24]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN ;
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <main+0x224>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <main+0x224>)
 8003dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbe:	6153      	str	r3, [r2, #20]
	GPIOB->MODER &= ~(GPIO_MODER_MODER4_0) ;
 8003dc0:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <main+0x228>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a4d      	ldr	r2, [pc, #308]	; (8003efc <main+0x228>)
 8003dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_1 ;
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <main+0x228>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <main+0x228>)
 8003dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd6:	6013      	str	r3, [r2, #0]
	TIM16->CR1 &= ~(TIM_CR1_CEN);
 8003dd8:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <main+0x22c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a48      	ldr	r2, [pc, #288]	; (8003f00 <main+0x22c>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6013      	str	r3, [r2, #0]
	TIM16->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1PE ;
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <main+0x22c>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <main+0x22c>)
 8003dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dee:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8003df2:	6193      	str	r3, [r2, #24]
	TIM16->PSC = 0 ;
 8003df4:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <main+0x22c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = 1000 ;
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <main+0x22c>)
 8003dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM16->CCR2 = 500 ;
 8003e02:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <main+0x22c>)
 8003e04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
	TIM16->CCER |= TIM_CCER_CC2E ;
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <main+0x22c>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <main+0x22c>)
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	6213      	str	r3, [r2, #32]
	TIM16->CR1 |= TIM_CR1_ARPE ;
 8003e16:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <main+0x22c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a39      	ldr	r2, [pc, #228]	; (8003f00 <main+0x22c>)
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	6013      	str	r3, [r2, #0]
	TIM16->EGR |= TIM_EGR_UG ;
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <main+0x22c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4a36      	ldr	r2, [pc, #216]	; (8003f00 <main+0x22c>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6153      	str	r3, [r2, #20]
	TIM16->CR1 |= TIM_CR1_CEN ;
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <main+0x22c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a33      	ldr	r2, [pc, #204]	; (8003f00 <main+0x22c>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN ;
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <main+0x224>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <main+0x224>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	6193      	str	r3, [r2, #24]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN ;
 8003e46:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <main+0x224>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <main+0x224>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e50:	6153      	str	r3, [r2, #20]
  HAL_Init();
 8003e52:	f7fc f9b9 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 8003e56:	f000 f85b 	bl	8003f10 <SystemClock_Config>
  MX_GPIO_Init();
 8003e5a:	f000 fabb 	bl	80043d4 <MX_GPIO_Init>
  MX_USART2_Init();
 8003e5e:	f000 fa8d 	bl	800437c <MX_USART2_Init>
  MX_TIM2_Init();
 8003e62:	f000 f99d 	bl	80041a0 <MX_TIM2_Init>
  MX_TIM16_Init();
 8003e66:	f000 fa11 	bl	800428c <MX_TIM16_Init>
  MX_ADC1_Init();
 8003e6a:	f000 f8af 	bl	8003fcc <MX_ADC1_Init>
  MX_ADC2_Init();
 8003e6e:	f000 f939 	bl	80040e4 <MX_ADC2_Init>
  HAL_ADC_Start(&hadc1);
 8003e72:	4824      	ldr	r0, [pc, #144]	; (8003f04 <main+0x230>)
 8003e74:	f7fc fbc2 	bl	80005fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003e78:	4823      	ldr	r0, [pc, #140]	; (8003f08 <main+0x234>)
 8003e7a:	f7fc fbbf 	bl	80005fc <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500) ;
 8003e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e82:	f7fc fa07 	bl	8000294 <HAL_Delay>
	      for (;;)
	      {
	          if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8003e86:	4921      	ldr	r1, [pc, #132]	; (8003f0c <main+0x238>)
 8003e88:	481e      	ldr	r0, [pc, #120]	; (8003f04 <main+0x230>)
 8003e8a:	f7fc fc6d 	bl	8000768 <HAL_ADC_PollForConversion>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d114      	bne.n	8003ebe <main+0x1ea>
	          {
	        	  data_ADC_PA0 = HAL_ADC_GetValue(&hadc1);
 8003e94:	481b      	ldr	r0, [pc, #108]	; (8003f04 <main+0x230>)
 8003e96:	f7fc fd2d 	bl	80008f4 <HAL_ADC_GetValue>
 8003e9a:	6178      	str	r0, [r7, #20]
	        	  mapped_ADC_PA0 = map(data_ADC_PA0, 0, 4095, 73, 250);
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	1d3a      	adds	r2, r7, #4
 8003ea0:	23fa      	movs	r3, #250	; 0xfa
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4694      	mov	ip, r2
 8003ea6:	2349      	movs	r3, #73	; 0x49
 8003ea8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003eac:	2100      	movs	r1, #0
 8003eae:	f7ff fef2 	bl	8003c96 <map.9250>
 8003eb2:	ee07 0a90 	vmov	s15, r0
 8003eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eba:	edc7 7a04 	vstr	s15, [r7, #16]
	          }

	          if (HAL_ADC_PollForConversion(&hadc2, 1000000) == HAL_OK)
 8003ebe:	4913      	ldr	r1, [pc, #76]	; (8003f0c <main+0x238>)
 8003ec0:	4811      	ldr	r0, [pc, #68]	; (8003f08 <main+0x234>)
 8003ec2:	f7fc fc51 	bl	8000768 <HAL_ADC_PollForConversion>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1dc      	bne.n	8003e86 <main+0x1b2>
			  {
	        	  data_ADC_PA1 = HAL_ADC_GetValue(&hadc2);
 8003ecc:	480e      	ldr	r0, [pc, #56]	; (8003f08 <main+0x234>)
 8003ece:	f7fc fd11 	bl	80008f4 <HAL_ADC_GetValue>
 8003ed2:	60f8      	str	r0, [r7, #12]
			  	  mapped_ADC_PA1 = map(data_ADC_PA1, 0, 4095, 0, 72);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	1d3a      	adds	r2, r7, #4
 8003ed8:	2348      	movs	r3, #72	; 0x48
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4694      	mov	ip, r2
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	f7ff fed6 	bl	8003c96 <map.9250>
 8003eea:	ee07 0a90 	vmov	s15, r0
 8003eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef2:	edc7 7a02 	vstr	s15, [r7, #8]
	          if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8003ef6:	e7c6      	b.n	8003e86 <main+0x1b2>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	48000400 	.word	0x48000400
 8003f00:	40014400 	.word	0x40014400
 8003f04:	20000080 	.word	0x20000080
 8003f08:	20000030 	.word	0x20000030
 8003f0c:	000f4240 	.word	0x000f4240

08003f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b096      	sub	sp, #88	; 0x58
 8003f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f1a:	2228      	movs	r2, #40	; 0x28
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fd02 	bl	8004928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f34:	463b      	mov	r3, r7
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	615a      	str	r2, [r3, #20]
 8003f44:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003f4a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003f50:	2300      	movs	r3, #0
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f54:	2301      	movs	r3, #1
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003f62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fb85 	bl	800167c <HAL_RCC_OscConfig>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003f78:	f000 fa94 	bl	80044a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f7c:	230f      	movs	r3, #15
 8003f7e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f80:	2302      	movs	r3, #2
 8003f82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fa77 	bl	800248c <HAL_RCC_ClockConfig>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003fa4:	f000 fa7e 	bl	80044a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV6;
 8003fac:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003fb0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe fc9f 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003fc0:	f000 fa70 	bl	80044a4 <Error_Handler>
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3758      	adds	r7, #88	; 0x58
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003fd2:	f107 031c 	add.w	r3, r7, #28
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
 8003fec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003fee:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <MX_ADC1_Init+0x114>)
 8003ff0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ff4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003ff6:	4b3a      	ldr	r3, [pc, #232]	; (80040e0 <MX_ADC1_Init+0x114>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <MX_ADC1_Init+0x114>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004004:	2201      	movs	r2, #1
 8004006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004008:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <MX_ADC1_Init+0x114>)
 800400a:	2201      	movs	r2, #1
 800400c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800400e:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004018:	2200      	movs	r2, #0
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <MX_ADC1_Init+0x114>)
 800401e:	2201      	movs	r2, #1
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004028:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <MX_ADC1_Init+0x114>)
 800402a:	2203      	movs	r2, #3
 800402c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004038:	2204      	movs	r2, #4
 800403a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <MX_ADC1_Init+0x114>)
 800403e:	2200      	movs	r2, #0
 8004040:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004044:	2200      	movs	r2, #0
 8004046:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004048:	4825      	ldr	r0, [pc, #148]	; (80040e0 <MX_ADC1_Init+0x114>)
 800404a:	f7fc f945 	bl	80002d8 <HAL_ADC_Init>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8004054:	f000 fa26 	bl	80044a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800405c:	f107 031c 	add.w	r3, r7, #28
 8004060:	4619      	mov	r1, r3
 8004062:	481f      	ldr	r0, [pc, #124]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004064:	f7fc ff16 	bl	8000e94 <HAL_ADCEx_MultiModeConfigChannel>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800406e:	f000 fa19 	bl	80044a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004072:	2301      	movs	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004076:	2301      	movs	r3, #1
 8004078:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 800407e:	2306      	movs	r3, #6
 8004080:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <MX_ADC1_Init+0x114>)
 8004090:	f7fc fc3e 	bl	8000910 <HAL_ADC_ConfigChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800409a:	f000 fa03 	bl	80044a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800409e:	2302      	movs	r3, #2
 80040a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80040a2:	2302      	movs	r3, #2
 80040a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	480d      	ldr	r0, [pc, #52]	; (80040e0 <MX_ADC1_Init+0x114>)
 80040ac:	f7fc fc30 	bl	8000910 <HAL_ADC_ConfigChannel>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80040b6:	f000 f9f5 	bl	80044a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80040ba:	230b      	movs	r3, #11
 80040bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80040be:	2303      	movs	r3, #3
 80040c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4806      	ldr	r0, [pc, #24]	; (80040e0 <MX_ADC1_Init+0x114>)
 80040c8:	f7fc fc22 	bl	8000910 <HAL_ADC_ConfigChannel>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80040d2:	f000 f9e7 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80040d6:	bf00      	nop
 80040d8:	3728      	adds	r7, #40	; 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000080 	.word	0x20000080

080040e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040ea:	463b      	mov	r3, r7
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
 80040f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <MX_ADC2_Init+0xb4>)
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <MX_ADC2_Init+0xb8>)
 80040fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004100:	4b25      	ldr	r3, [pc, #148]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004102:	2200      	movs	r2, #0
 8004104:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800410c:	4b22      	ldr	r3, [pc, #136]	; (8004198 <MX_ADC2_Init+0xb4>)
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004114:	2201      	movs	r2, #1
 8004116:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <MX_ADC2_Init+0xb4>)
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004122:	2200      	movs	r2, #0
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004128:	2201      	movs	r2, #1
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <MX_ADC2_Init+0xb4>)
 800412e:	2200      	movs	r2, #0
 8004130:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004134:	2201      	movs	r2, #1
 8004136:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <MX_ADC2_Init+0xb4>)
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004140:	4b15      	ldr	r3, [pc, #84]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004142:	2204      	movs	r2, #4
 8004144:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004148:	2200      	movs	r2, #0
 800414a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <MX_ADC2_Init+0xb4>)
 800414e:	2200      	movs	r2, #0
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004152:	4811      	ldr	r0, [pc, #68]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004154:	f7fc f8c0 	bl	80002d8 <HAL_ADC_Init>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800415e:	f000 f9a1 	bl	80044a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004162:	2301      	movs	r3, #1
 8004164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004166:	2301      	movs	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800417a:	463b      	mov	r3, r7
 800417c:	4619      	mov	r1, r3
 800417e:	4806      	ldr	r0, [pc, #24]	; (8004198 <MX_ADC2_Init+0xb4>)
 8004180:	f7fc fbc6 	bl	8000910 <HAL_ADC_ConfigChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800418a:	f000 f98b 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000030 	.word	0x20000030
 800419c:	50000100 	.word	0x50000100

080041a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b4:	f107 031c 	add.w	r3, r7, #28
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041c0:	463b      	mov	r3, r7
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	609a      	str	r2, [r3, #8]
 80041ca:	60da      	str	r2, [r3, #12]
 80041cc:	611a      	str	r2, [r3, #16]
 80041ce:	615a      	str	r2, [r3, #20]
 80041d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 71;
 80041e6:	4b28      	ldr	r3, [pc, #160]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041e8:	2247      	movs	r2, #71	; 0x47
 80041ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ec:	4b26      	ldr	r3, [pc, #152]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041f2:	4b25      	ldr	r3, [pc, #148]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041f8:	4823      	ldr	r0, [pc, #140]	; (8004288 <MX_TIM2_Init+0xe8>)
 80041fa:	f7fe fcb3 	bl	8002b64 <HAL_TIM_Base_Init>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004204:	f000 f94e 	bl	80044a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800420e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004212:	4619      	mov	r1, r3
 8004214:	481c      	ldr	r0, [pc, #112]	; (8004288 <MX_TIM2_Init+0xe8>)
 8004216:	f7fe fe1d 	bl	8002e54 <HAL_TIM_ConfigClockSource>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004220:	f000 f940 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004224:	4818      	ldr	r0, [pc, #96]	; (8004288 <MX_TIM2_Init+0xe8>)
 8004226:	f7fe fcc8 	bl	8002bba <HAL_TIM_PWM_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004230:	f000 f938 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800423c:	f107 031c 	add.w	r3, r7, #28
 8004240:	4619      	mov	r1, r3
 8004242:	4811      	ldr	r0, [pc, #68]	; (8004288 <MX_TIM2_Init+0xe8>)
 8004244:	f7ff fa78 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800424e:	f000 f929 	bl	80044a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004252:	2360      	movs	r3, #96	; 0x60
 8004254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004262:	463b      	mov	r3, r7
 8004264:	2204      	movs	r2, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4807      	ldr	r0, [pc, #28]	; (8004288 <MX_TIM2_Init+0xe8>)
 800426a:	f7fe fcdb 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004274:	f000 f916 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004278:	4803      	ldr	r0, [pc, #12]	; (8004288 <MX_TIM2_Init+0xe8>)
 800427a:	f000 fa09 	bl	8004690 <HAL_TIM_MspPostInit>

}
 800427e:	bf00      	nop
 8004280:	3738      	adds	r7, #56	; 0x38
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000120 	.word	0x20000120

0800428c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b092      	sub	sp, #72	; 0x48
 8004290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	60da      	str	r2, [r3, #12]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	615a      	str	r2, [r3, #20]
 80042a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042a6:	463b      	mov	r3, r7
 80042a8:	222c      	movs	r2, #44	; 0x2c
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fb3b 	bl	8004928 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042b4:	4a30      	ldr	r2, [pc, #192]	; (8004378 <MX_TIM16_Init+0xec>)
 80042b6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 71;
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042c6:	2247      	movs	r2, #71	; 0x47
 80042c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80042dc:	4825      	ldr	r0, [pc, #148]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042de:	f7fe fc41 	bl	8002b64 <HAL_TIM_Base_Init>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80042e8:	f000 f8dc 	bl	80044a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80042ec:	4821      	ldr	r0, [pc, #132]	; (8004374 <MX_TIM16_Init+0xe8>)
 80042ee:	f7fe fc64 	bl	8002bba <HAL_TIM_PWM_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80042f8:	f000 f8d4 	bl	80044a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042fc:	2360      	movs	r3, #96	; 0x60
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 35;
 8004300:	2323      	movs	r3, #35	; 0x23
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004308:	2300      	movs	r3, #0
 800430a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004310:	2300      	movs	r3, #0
 8004312:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431c:	2200      	movs	r2, #0
 800431e:	4619      	mov	r1, r3
 8004320:	4814      	ldr	r0, [pc, #80]	; (8004374 <MX_TIM16_Init+0xe8>)
 8004322:	f7fe fc7f 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 800432c:	f000 f8ba 	bl	80044a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004348:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004352:	463b      	mov	r3, r7
 8004354:	4619      	mov	r1, r3
 8004356:	4807      	ldr	r0, [pc, #28]	; (8004374 <MX_TIM16_Init+0xe8>)
 8004358:	f7ff fa5c 	bl	8003814 <HAL_TIMEx_ConfigBreakDeadTime>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8004362:	f000 f89f 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004366:	4803      	ldr	r0, [pc, #12]	; (8004374 <MX_TIM16_Init+0xe8>)
 8004368:	f000 f992 	bl	8004690 <HAL_TIM_MspPostInit>

}
 800436c:	bf00      	nop
 800436e:	3748      	adds	r7, #72	; 0x48
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000160 	.word	0x20000160
 8004378:	40014400 	.word	0x40014400

0800437c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <MX_USART2_Init+0x50>)
 8004382:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <MX_USART2_Init+0x54>)
 8004384:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 38400;
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <MX_USART2_Init+0x50>)
 8004388:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800438c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <MX_USART2_Init+0x50>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <MX_USART2_Init+0x50>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <MX_USART2_Init+0x50>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <MX_USART2_Init+0x50>)
 80043a2:	220c      	movs	r2, #12
 80043a4:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <MX_USART2_Init+0x50>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <MX_USART2_Init+0x50>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <MX_USART2_Init+0x50>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80043b8:	4804      	ldr	r0, [pc, #16]	; (80043cc <MX_USART2_Init+0x50>)
 80043ba:	f7ff faa3 	bl	8003904 <HAL_USART_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80043c4:	f000 f86e 	bl	80044a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	200000d0 	.word	0x200000d0
 80043d0:	40004400 	.word	0x40004400

080043d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043da:	f107 0314 	add.w	r3, r7, #20
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	60da      	str	r2, [r3, #12]
 80043e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ea:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <MX_GPIO_Init+0xc4>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <MX_GPIO_Init+0xc4>)
 80043f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043f4:	6153      	str	r3, [r2, #20]
 80043f6:	4b28      	ldr	r3, [pc, #160]	; (8004498 <MX_GPIO_Init+0xc4>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004402:	4b25      	ldr	r3, [pc, #148]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4a24      	ldr	r2, [pc, #144]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800440c:	6153      	str	r3, [r2, #20]
 800440e:	4b22      	ldr	r3, [pc, #136]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800441a:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <MX_GPIO_Init+0xc4>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004424:	6153      	str	r3, [r2, #20]
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4a18      	ldr	r2, [pc, #96]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800443c:	6153      	str	r3, [r2, #20]
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <MX_GPIO_Init+0xc4>)
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800444a:	2200      	movs	r2, #0
 800444c:	2120      	movs	r1, #32
 800444e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004452:	f7fd f8fb 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800445a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <MX_GPIO_Init+0xc8>)
 800445e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	4619      	mov	r1, r3
 800446a:	480d      	ldr	r0, [pc, #52]	; (80044a0 <MX_GPIO_Init+0xcc>)
 800446c:	f7fc ff7c 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004470:	2320      	movs	r3, #32
 8004472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004474:	2301      	movs	r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	4619      	mov	r1, r3
 8004486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800448a:	f7fc ff6d 	bl	8001368 <HAL_GPIO_Init>

}
 800448e:	bf00      	nop
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	10210000 	.word	0x10210000
 80044a0:	48000800 	.word	0x48000800

080044a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_MspInit+0x44>)
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_MspInit+0x44>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6193      	str	r3, [r2, #24]
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_MspInit+0x44>)
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_MspInit+0x44>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <HAL_MspInit+0x44>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044dc:	61d3      	str	r3, [r2, #28]
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_MspInit+0x44>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80044ea:	2007      	movs	r0, #7
 80044ec:	f7fc ff08 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 031c 	add.w	r3, r7, #28
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800451c:	d146      	bne.n	80045ac <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_ADC_MspInit+0x120>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	4a3d      	ldr	r2, [pc, #244]	; (800461c <HAL_ADC_MspInit+0x120>)
 8004526:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004528:	4b3c      	ldr	r3, [pc, #240]	; (800461c <HAL_ADC_MspInit+0x120>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10b      	bne.n	8004548 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_ADC_MspInit+0x124>)
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_ADC_MspInit+0x124>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	6153      	str	r3, [r2, #20]
 800453c:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_ADC_MspInit+0x124>)
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <HAL_ADC_MspInit+0x124>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	4a34      	ldr	r2, [pc, #208]	; (8004620 <HAL_ADC_MspInit+0x124>)
 800454e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004552:	6153      	str	r3, [r2, #20]
 8004554:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_ADC_MspInit+0x124>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_ADC_MspInit+0x124>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	4a2e      	ldr	r2, [pc, #184]	; (8004620 <HAL_ADC_MspInit+0x124>)
 8004566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800456a:	6153      	str	r3, [r2, #20]
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_ADC_MspInit+0x124>)
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004578:	2303      	movs	r3, #3
 800457a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800457c:	2303      	movs	r3, #3
 800457e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004584:	f107 031c 	add.w	r3, r7, #28
 8004588:	4619      	mov	r1, r3
 800458a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800458e:	f7fc feeb 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004592:	2301      	movs	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004596:	2303      	movs	r3, #3
 8004598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f107 031c 	add.w	r3, r7, #28
 80045a2:	4619      	mov	r1, r3
 80045a4:	481f      	ldr	r0, [pc, #124]	; (8004624 <HAL_ADC_MspInit+0x128>)
 80045a6:	f7fc fedf 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80045aa:	e032      	b.n	8004612 <HAL_ADC_MspInit+0x116>
  else if(hadc->Instance==ADC2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_ADC_MspInit+0x12c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12d      	bne.n	8004612 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80045b6:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_ADC_MspInit+0x120>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3301      	adds	r3, #1
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_ADC_MspInit+0x120>)
 80045be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_ADC_MspInit+0x120>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d10b      	bne.n	80045e0 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <HAL_ADC_MspInit+0x124>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4a14      	ldr	r2, [pc, #80]	; (8004620 <HAL_ADC_MspInit+0x124>)
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d2:	6153      	str	r3, [r2, #20]
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_ADC_MspInit+0x124>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_ADC_MspInit+0x124>)
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_ADC_MspInit+0x124>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	6153      	str	r3, [r2, #20]
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_ADC_MspInit+0x124>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80045f8:	2310      	movs	r3, #16
 80045fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045fc:	2303      	movs	r3, #3
 80045fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004604:	f107 031c 	add.w	r3, r7, #28
 8004608:	4619      	mov	r1, r3
 800460a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800460e:	f7fc feab 	bl	8001368 <HAL_GPIO_Init>
}
 8004612:	bf00      	nop
 8004614:	3730      	adds	r7, #48	; 0x30
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000028 	.word	0x20000028
 8004620:	40021000 	.word	0x40021000
 8004624:	48000400 	.word	0x48000400
 8004628:	50000100 	.word	0x50000100

0800462c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d10c      	bne.n	8004658 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_TIM_Base_MspInit+0x5c>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <HAL_TIM_Base_MspInit+0x5c>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	61d3      	str	r3, [r2, #28]
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <HAL_TIM_Base_MspInit+0x5c>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004656:	e010      	b.n	800467a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <HAL_TIM_Base_MspInit+0x60>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10b      	bne.n	800467a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_TIM_Base_MspInit+0x5c>)
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_TIM_Base_MspInit+0x5c>)
 8004668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466c:	6193      	str	r3, [r2, #24]
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_TIM_Base_MspInit+0x5c>)
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	40014400 	.word	0x40014400

08004690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d11c      	bne.n	80046ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_TIM_MspPostInit+0xa8>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <HAL_TIM_MspPostInit+0xa8>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	6153      	str	r3, [r2, #20]
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_TIM_MspPostInit+0xa8>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046ca:	2308      	movs	r3, #8
 80046cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	2302      	movs	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046d6:	2303      	movs	r3, #3
 80046d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046da:	2301      	movs	r3, #1
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	4619      	mov	r1, r3
 80046e4:	4815      	ldr	r0, [pc, #84]	; (800473c <HAL_TIM_MspPostInit+0xac>)
 80046e6:	f7fc fe3f 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80046ea:	e020      	b.n	800472e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM16)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_TIM_MspPostInit+0xb0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d11b      	bne.n	800472e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_TIM_MspPostInit+0xa8>)
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <HAL_TIM_MspPostInit+0xa8>)
 80046fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004700:	6153      	str	r3, [r2, #20]
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_TIM_MspPostInit+0xa8>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800470e:	2310      	movs	r3, #16
 8004710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800471a:	2303      	movs	r3, #3
 800471c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800471e:	2301      	movs	r3, #1
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	4619      	mov	r1, r3
 8004728:	4804      	ldr	r0, [pc, #16]	; (800473c <HAL_TIM_MspPostInit+0xac>)
 800472a:	f7fc fe1d 	bl	8001368 <HAL_GPIO_Init>
}
 800472e:	bf00      	nop
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	48000400 	.word	0x48000400
 8004740:	40014400 	.word	0x40014400

08004744 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <HAL_USART_MspInit+0xb4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d144      	bne.n	80047f0 <HAL_USART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004766:	4b25      	ldr	r3, [pc, #148]	; (80047fc <HAL_USART_MspInit+0xb8>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_USART_MspInit+0xb8>)
 800476c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004770:	61d3      	str	r3, [r2, #28]
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_USART_MspInit+0xb8>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_USART_MspInit+0xb8>)
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <HAL_USART_MspInit+0xb8>)
 8004784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004788:	6153      	str	r3, [r2, #20]
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_USART_MspInit+0xb8>)
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004796:	4b19      	ldr	r3, [pc, #100]	; (80047fc <HAL_USART_MspInit+0xb8>)
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_USART_MspInit+0xb8>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a0:	6153      	str	r3, [r2, #20]
 80047a2:	4b16      	ldr	r3, [pc, #88]	; (80047fc <HAL_USART_MspInit+0xb8>)
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PB5     ------> USART2_CK 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80047ae:	230c      	movs	r3, #12
 80047b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b2:	2302      	movs	r3, #2
 80047b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ba:	2303      	movs	r3, #3
 80047bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047be:	2307      	movs	r3, #7
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c2:	f107 0314 	add.w	r3, r7, #20
 80047c6:	4619      	mov	r1, r3
 80047c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047cc:	f7fc fdcc 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047d0:	2320      	movs	r3, #32
 80047d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047dc:	2303      	movs	r3, #3
 80047de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047e0:	2307      	movs	r3, #7
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4619      	mov	r1, r3
 80047ea:	4805      	ldr	r0, [pc, #20]	; (8004800 <HAL_USART_MspInit+0xbc>)
 80047ec:	f7fc fdbc 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047f0:	bf00      	nop
 80047f2:	3728      	adds	r7, #40	; 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40004400 	.word	0x40004400
 80047fc:	40021000 	.word	0x40021000
 8004800:	48000400 	.word	0x48000400

08004804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004812:	b480      	push	{r7}
 8004814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004816:	e7fe      	b.n	8004816 <HardFault_Handler+0x4>

08004818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800481c:	e7fe      	b.n	800481c <MemManage_Handler+0x4>

0800481e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004822:	e7fe      	b.n	8004822 <BusFault_Handler+0x4>

08004824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004828:	e7fe      	b.n	8004828 <UsageFault_Handler+0x4>

0800482a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800482a:	b480      	push	{r7}
 800482c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004858:	f7fb fcfc 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800485c:	bf00      	nop
 800485e:	bd80      	pop	{r7, pc}

08004860 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <SystemInit+0x28>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <SystemInit+0x28>)
 800486c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <SystemInit+0x28>)
 8004876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800487a:	609a      	str	r2, [r3, #8]
#endif
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800488c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004890:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004892:	e003      	b.n	800489c <LoopCopyDataInit>

08004894 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004896:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004898:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800489a:	3104      	adds	r1, #4

0800489c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800489c:	480b      	ldr	r0, [pc, #44]	; (80048cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80048a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80048a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80048a4:	d3f6      	bcc.n	8004894 <CopyDataInit>
	ldr	r2, =_sbss
 80048a6:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80048a8:	e002      	b.n	80048b0 <LoopFillZerobss>

080048aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80048aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80048ac:	f842 3b04 	str.w	r3, [r2], #4

080048b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <LoopForever+0x16>)
	cmp	r2, r3
 80048b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80048b4:	d3f9      	bcc.n	80048aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048b6:	f7ff ffd3 	bl	8004860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ba:	f000 f811 	bl	80048e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80048be:	f7ff fa09 	bl	8003cd4 <main>

080048c2 <LoopForever>:

LoopForever:
    b LoopForever
 80048c2:	e7fe      	b.n	80048c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80048c4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80048c8:	08004990 	.word	0x08004990
	ldr	r0, =_sdata
 80048cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80048d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80048d8:	200001a0 	.word	0x200001a0

080048dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048dc:	e7fe      	b.n	80048dc <ADC1_2_IRQHandler>
	...

080048e0 <__libc_init_array>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4e0d      	ldr	r6, [pc, #52]	; (8004918 <__libc_init_array+0x38>)
 80048e4:	4c0d      	ldr	r4, [pc, #52]	; (800491c <__libc_init_array+0x3c>)
 80048e6:	1ba4      	subs	r4, r4, r6
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	2500      	movs	r5, #0
 80048ec:	42a5      	cmp	r5, r4
 80048ee:	d109      	bne.n	8004904 <__libc_init_array+0x24>
 80048f0:	4e0b      	ldr	r6, [pc, #44]	; (8004920 <__libc_init_array+0x40>)
 80048f2:	4c0c      	ldr	r4, [pc, #48]	; (8004924 <__libc_init_array+0x44>)
 80048f4:	f000 f820 	bl	8004938 <_init>
 80048f8:	1ba4      	subs	r4, r4, r6
 80048fa:	10a4      	asrs	r4, r4, #2
 80048fc:	2500      	movs	r5, #0
 80048fe:	42a5      	cmp	r5, r4
 8004900:	d105      	bne.n	800490e <__libc_init_array+0x2e>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004908:	4798      	blx	r3
 800490a:	3501      	adds	r5, #1
 800490c:	e7ee      	b.n	80048ec <__libc_init_array+0xc>
 800490e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004912:	4798      	blx	r3
 8004914:	3501      	adds	r5, #1
 8004916:	e7f2      	b.n	80048fe <__libc_init_array+0x1e>
 8004918:	08004988 	.word	0x08004988
 800491c:	08004988 	.word	0x08004988
 8004920:	08004988 	.word	0x08004988
 8004924:	0800498c 	.word	0x0800498c

08004928 <memset>:
 8004928:	4402      	add	r2, r0
 800492a:	4603      	mov	r3, r0
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <memset+0xa>
 8004930:	4770      	bx	lr
 8004932:	f803 1b01 	strb.w	r1, [r3], #1
 8004936:	e7f9      	b.n	800492c <memset+0x4>

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
